<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
    body {
        background-color: wheat;
    }

    pre {
        color: red;
    }   
    </style>
    <title>Глава. 6</title>
</head>
<body>
    <h1>Полезные приемы и операции</h1>
    <p>Обсудим то что не вошло в предущие главы. Но все же явдяются нужными и полезными.</p>
    <h2>Ссылки</h2>
    <p>
    Cсылки позволяют ссылаться на область памяти, где расположено значение переменной или параметра.
    Для создания ссылки перед переменной указывается символ амперсанда - &.
    </p>
    <p>Пример создания ссылки:</p>
    <pre>
&lt;?php
$bim = "Bim";
$bom = &$bim; // передача ссылки
$bom = "Bom";
echo "bim = $bim <br>"; // bim = Bom
echo "bom = $bom"; // bom = Bom


//Сначала создаётся переменная $bim со значением "Bim". Затем создаётся вторая переменная $bom, 
//которой передаётся ссылка на $bim с помощью символа амперсанда (&). Это означает, что изменение
//значения одной переменной приведёт к изменению другой, так как они указывают на одну и ту же 
//область в памяти.После этого значение $bom изменяется на "Bom", что также изменяет значение 
//$bim, поскольку они связаны через ссылку. В результате оба echo выводят "Bom".
?&gt;
</pre>
//============================================================
<p>
Пример передачи параметра по ссылке:
</p>

<pre>
&lt;?php
function square(&$a) {
 $a *= $a;
echo "a = $a";
}

$number = 5;
square($number);
echo "<br />number = $number";

//Функция square() принимает параметр по ссылке, используя знак амперсанда перед параметром.
//Внутри функции значение параметра возводится в квадрат, что изменяет значение переменной 
//$number, переданной в функцию.Возвращение ссылки из функции:
Функция также может возвращать ссылку. Для этого перед определением функции и 
её вызовом указывается символ амперсанда.
?&gt;
</pre>
//===================================================
<p>
Пример возвращения ссылки из функции:
</p>

<pre>
&lt;?php
function &checkName(&$name) {
if($name === "admin") $name = "Петр";
return $name;
}

$userName = "admin";
$checkedName = &checkName($userName);
echo "<br />userName: $userName";
echo "<br />checkedName: $checkedName";



//Функция checkName() получает параметр по ссылке и возвращает ссылку на него. 
//После вызова функции переменная $checkedName фактически содержит ссылку на переменную $userName.
?&gt;
</pre>
<hr>
<br>
<h2>Константы.</h2>
<p>
    Константы отличаются от переменных тем что их значения изменить нельзя.
</p>
<p>
    Чтобы длбавить константу применяется конструкция  define(). Первым арг-м ф-ии 
    передается текст с названием константы. Вторым арг-м указывается ее значение.
    В начале названия константы $ не указывается. Чтобы не запутаться название константы пишется 
    с большой буквы.
</p>
<p>
    Также после создания костанты ее нельзя удалить. Если нужно проверить наличия константы - 
    использется ф-я defined( ). Аргументом внутри круглых скобок указывается текст с именем 
    константы которую мы проверяем. В результате будет true или false в зависимости от того
    определена константа или нет.
</p>
<p>
    Есть еще один способ добавить константу. Для этого использем ключевое слово const. 
    После него указываем название константы(без $) и через оператор присваивания значение 
    константы.
</p>
<p>
В PHP разница между использованием define() и const заключается в следующем:
</p>
<p>
define(): Используется для определения констант с произвольным выражением.
</p>
<p>
const: Позволяет определить константы только для скалярных выражений 
(например, int, float, bool, string) и массивов, содержащих только скалярные выражения.
</p>
<p>
Область видимости:
</p>
<p>
define(): Константы, определенные через define(), могут быть доступны в любом месте 
кода без учета области видимости.
</p>
<p>
const: Константы, объявленные через const, должны быть определены в самой верхней области 
видимости, так как они обрабатываются во время компиляции. Это означает, что их нельзя 
объявить внутри функций, циклов, условий и т.д.
</p>
<p>
Изменение и удаление:
</p>
<p>
define(): Позволяет определить константу с произвольным выражением, которое не может 
быть изменено или удалено после первоначального объявления.
</p>
<p>
const: Константы, определенные через const, являются частью исходного кода и не могут 
быть изменены или удалены после объявления.
</p>
<p>
Использование:
</p>
<p>
define(): Подходит для определения констант с произвольными значениями, которые могут 
потребоваться в различных частях кода.
</p>
<p>
const: Лучше использовать для определения констант с простыми скалярными значениями 
или массивами, которые не требуют сложных вычислений.
</p>
<p>
Таким образом, выбор между define() и const зависит от типа данных, которые вы хотите 
определить как константу, и от того, как вы планируете использовать эту константу в вашем коде.
</p>

<pre>
&lt;?php
// Пример использования define()
define("PI", 3.14);
echo PI; // Выведет 3.14

// Пример использования const
const MY_CONSTANT = 'Hello, World!';
echo MY_CONSTANT; // Выведет Hello, World!

// Пример использования define() для создания константы с выражением
define("AREA", M_PI * pow(10, 2));
echo AREA; // Выведет примерно 314.159

// Пример использования const для создания массива констант
const FRUITS = array('apple', 'banana', 'cherry');
echo FRUITS[0]; // Выведет apple
?&gt;
</pre>
<h3>Еще немного о константах</h3>
<p>Кроме define() и const в PHP существуют встроенные константы.</p>
<p>Их название начинается и заканчиваются двойным подчеркиванием</p>
<p>
    __LINE__  - можно узнать текущий номер строки в файле.
</p>
<p>
    __FILE__  - позволяет узнать название файла. 
</p>
<p>
    __DIR__  - название директории в которой находится файл.
</p>
<p>
    __FUNCTION__  - можно узнать название функции к которой происходит обращение.
</p>
<hr>
<br>
<h2>Глобальные переменные</h2>
<p>
Глобальные переменные в PHP доступны во всех функциях и областях видимости. 
По умолчанию, если объявим переменную внутри функции, она является локальной
и доступна только внутри этой функции. Однако, если нужно получить доступ к 
переменной за пределами функции, где она была объявлена, или изменить её значение, 
можем использовать ключевое слово global, чтобы сделать переменную глобальной.
</p>
<pre>
&lt;?php
$name = "Дима"; // Глобальная переменная

function myFunction() {
 global $name; // Объявляем, что хотим использовать глобальную переменную $name
 echo "Привет, " . $name; // Выводим значение глобальной переменной
}

myFunction(); // Выведет "Привет, Дима"
?&gt;
</pre>
<p>
Также можно использовать встроенный массив $GLOBALS, который содержит все глобальные 
переменные в виде пар ключ-значение, где ключом является имя переменной. Это позволяет 
получить доступ к глобальной переменной без использования global.
</p>

<pre>
&lt;?php
$name = "Александр"; // Глобальная переменная

function myFunction() {
 echo "Привет, " . $GLOBALS['name']; // Получаем значение глобальной переменной через $GLOBALS
}

myFunction(); // Выведет "Привет, Александр"
?&gt;
</pre>
<p>
Запомним, что использование глобальных переменных может привести к трудностям в 
поддержке кода и ошибкам, связанным с конфликтами имён переменных. Поэтому рекомендуется
использовать локальные переменные и передавать значения между функциями через аргументы 
и возвращаемые значения.
</p>
<hr>
<br>
<h2>
    Статические переменные.
</h2>
<p>
    Такие переменные объявляются с ключевым словом static. Особенность таких пере-х в том,
    что они не удаляются из памяти и после прекращения работы ф-ии при последующем вызове 
    ипользуются используется одна и таже пере-я.
</p>
<p>Пример статические пер-е:</p>
<pre>
&lt;?php
function calc() {

// Статическая пер-я:
static $value=0;
$value+=100;
return $value;
}
// Вызов ф-ии в операторе цикла

for ($k=1; $k<=5;$k++) {
    echo "[$k] calk() -> ", calc(),"\n"
}

//В результате будет так:
[1] calc() -> 100
[2] calc() -> 200
[3] calc() -> 300
[4] calc() -> 400
[5] calc() -> 500
?&gt;
</pre>
<p>
Функция calc() использует статическую переменную $value, которая инициализируется 
значением 0 при первом вызове функции. Каждый последующий вызов увеличивает значение
$value на 100 и возвращает его. В цикле for функция calc() вызывается пять раз, 
каждый раз увеличивая значение на 100.
</p>
<hr>
<br>

<pre>
&lt;?php

?&gt;
</pre>


</body>
</html>