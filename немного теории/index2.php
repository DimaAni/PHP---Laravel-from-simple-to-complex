<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Глава 2.</title>
</head>
<body>
    <h1>Глава 2.</h1>
    <p>Перед началом обсудим пару нюнсов.</p>
    <p>Работу PHP кодов которые у нас будут да и в общем это относиться
        ко всем. Это проверяется в режиме интепритатора. Для этого требуется 
        сохранить необходимый файл в расширении .php и выполнять
        необходимую инструкцию в командной строке. 
    </p>
    <p>
    Хорошим выбором для разработки PHP-проектов к примеру это
    среда разработки NetBeans.Она позволяет работать как в режиме
    тестирования какв режиме интепритатора так и в режиме локального сервера.
    </p>
    <p>
    Для проверки коректности работы программ в режиме сервера нужно размещать
    их в следующий шаблон.
    </p>
    <pre>
    &lt;?php
    print ("Hello world PHP!!!");
    ?&gt;
    </pre>
    <p>Если подзабыли то это мы обсуждали в 1 главе</p>
    <hr>
    <br>
    <h2>Переменные типы данных</h2>
    <p>
    Что такое переменная в общих чертах? Переменная представляет собой
    именованый блок памяти к которому можно обращаться по имени для
    считывания значения из памяти и записи туда нового значения.
    В PHP переменная создается довольно просто, присваем ей значение.
    Ну или по другому переменная появляется тогда когда мы присваиваем
    какое то значение.   
    </p>
    <p>
    В PHP начало переменной начинаетсясо знака $
    (этот символ является частью имени переменной)    
    Чтобы присвоить имя переменной указывается название пременной и через
    оператор присваивания (это является знак = равенства)приcваивается переменной
    значение.Например, командой $number=345 переменной $number присваемое 
    целочисленное значение 345.
    </p>
    <p>
    В PHP тип переменной как понятие отсутсвует. Тоесть у пременной нет своего типа.
    Но есть тип значения на который она ссылается. На разных этапах выполнения
    программы одна и таже переменная может ссылаться на разные типы данных.   
    </p>
    <h2>Дополнение</h2>
    <p>
    На всякий случай для тех у ково PHP язык является первым и слабо знаком 
    в общем с программированием. В PHP существуют коментарии. Коментарии это
    текст для програмистов и игнорируемый при выполнении команды.
    Коментарии являются подсказками и объясняют значение команд. Всего их
    два вида это однострочные и многострочные.
    </p>
    <p>
    Теперь о разнице между двойными и одинарными кавычками в переменных.    
    </p>
    <p>
    При выполнении команды print 'Перменная $number: ' отображается строго то текст,
    что указан одинарных кавычках.
    </p>
    <p>
    При выполнении команды print "Перменная $number: " будет подставляться уже 
    само содержимое(то что внутри ее) этой переменной.
    </p>    
    <br>
    <hr>
    <h2>Константы</h2>
    <p>
    Кроме переменных в PHP могут применяться константы. Разница между ними в том
    значение константы изменить нельзя. Для создания константы используется
    функция <strong>define ( ).</strong>
    </p>
    <p>
        Первым аргументом передется ее имя, вторым аргументом указывается ее значение.
    </p>
    <p>
        Символ $ в названии константы не применяется.
    </p>
    <p>
        Чтобы не путаться название констант принято записывать с большыми прописными
        буквами, к примеру вот такой командой define ("NUMBER", 123) определяется
        константа NUMBER c ее значением 123.
    </p>
    <p>
        Для проверки существует ли константа с определенным именем, применяем
        функцию define ( ). Аргументом функции передается название константы,
        эта записывается в кавычки.
    </p>
    <hr>
    <br>
    <h2>Основные типы данных</h2>
    <p>
        Для повторения вспомним что <strong>У переменных нет своего типа данных, 
        но есть тип значения на которое ссылается эта переменная</strong>
    </p>
    <p>    
        Для опреления типа значения используем функцию <strong>gettype ( ).</strong>
        Аргументом функции передается переменная. Результатом функции возвращается текст
        с названием типа значения на которое ссылается переменная
    </p>
    <ul>
        <li>Значения:</li>
        <li>целочисленное - integer</li>
        <li>с плавающей запятой - double</li>
        <li>текст - string</li>
        <li>булевые значения - true и false</li>
        <li>массив - array</li>
        <li>объект - object</li>
        <li>ссылка на внешний ресурс - resource</li>
        <li>отсутвие значения - NULL</li>
    </ol>
    <hr>
<pre>&lt;?php
    // Целочисленые значения;
    $value=123;
    echo $value," => тип ", gettype($value),"\n";//выведет тип integer
    <hr>
    // Текстовое значение;
    $value="текст";
    echo $value," => тип ", gettype($value),"\n";//выведет тип string
    <hr>
    // Действительное число;
    $value=22.3;
    echo $value," => тип ", gettype($value),"\n";//выведет тип double
    <hr>
    // Пустая строка;
    echo $VALUE," => тип ", gettype($VALUE),"\n";//выведет тип NULL
?&gt;</pre>
    <hr>
    <br>
    <p>Запомнить</p>
    <strong>
        \n это одна из управляющих символов. Если ее раазместить в тексте заключенных в двойные
        кавычки то в это месте бкдет переход на другую строку.
        Существуют и еще инструкции для разных действий.
    </strong>
    <h2>Допонение</h2>
    <p>
        <strong>
        Переменные чуствительны к регистру, тоесть одно и тоже название написанное
        с большой буквы или же с маленькой считаются разными переменными.
        </strong>
    </p>
    <p>
        В PHP существует группа ф-й прзволяющяя проверить данные на 
        принадлежность к определенному типу.
    </p> 
    <p>  
        is_array ()
        (ссылается переменная на массив),
    </p>
    <p>
        is_bool ()
        (ссылается ли переменная на логическое значение),
    </p>
    <p>
        is_float ()
        (ссылается ли переменная на действительное число),
    </p>
    <p>
        is_int ()
        (ссылается ли переменная на целое число),
    </p>
    <p>
        is_null ()
        (является ли значением переменой пустая строка),
    </p>
    <p>
        is_numeric ()
        (ссылается ли переменная на число или строку с текстовым представлением числа),
    </p>
    <p>
        is_object ()
        (ссылается ли переменная на объект),
    </p>
    <p>
        is_resource ()
        (ссылается ли переменная на ресурс),
    </p>
    <p>
        is_acalar ()
        (ссылается ли переменная на скалярное значение),
    </p>
    <p>
        is_string ()
        (ссылается ли переменная на текст),
    </p>
    <hr>
    <br>
<h2>Подробней</h2>
<p> 
    Кроме ф-и settype (), для явного изменения типа значения, ипользуется инструкция
    вида (тип) (название типа в круглых скобках), котрая указывается перед значением
    тип которого надо преобразовать. К примеру: 
</p>
<p>
    (int) или (integer) -  к целочисленому типу.
</p>
<p>
    (bool) или (boolean) - к логическому типу.
</p>
<p>
    (string) - к текстовому типу.
</p>
<p>
    (float) или (double) (real)  - к действительному числовому типу.
    Последнюю инструкцию можно забыть ее вывели из использования в 8 версии.
</p>
<p>
    Есть и еще варианты инструкций. Как говорится гугл в помощь ну или
    документация.
</p>
<h2>Еще подробности</h2>
<p>
    Для проверки присвоено ли значение к некоторой пер-й используем ф-ю
    isset () (название проверяемой пе-й передается аргументом ф-и). 
    Чтобы удалить пе-ю ипользуем ф-ю unset ()
</p>
<hr>
<br>
<h2>Арифметические операции</h2>
<p>
    Обычные базовые арифметические операции которые выполняются с
    с п-ми и значениями разных типов. Условно их можно разделить
    на арифметические, логическкие и побитовые опрерации.
    Ну и отдельно можно выделить операции с текстом, операции
    связанные с присваиванием значений и тернарный оператор.
</p>
<ol>
    <li>Операция сложения +</li>
    <li>Операция вычитания -</li>
    <li>Операция умножения *</li>
    <li>Операция деления /</li>
    <li>Операция возведение в степень **</li>
    <li>Операция остаток от деления %</li>
</ol>
<p>
    Кроме выше перечисленых бинарных операторов есть и унарные 
    операторы инкремента ++ и декремента -- . Они также могут
    быть как префиксной так и постфиксной формы. Между префиксной
    и постфисной формой тоже есть разница. Оно заключается в том,
    что значение п-й в постфиксной форме оператора является 
    (старое, которое было до применения оператора)значение операнда,
    ну а значение п-й выражения с префиксной формой оператора инкремента
    или декремента является (новое, вычисление после применения оператора)
    значения операнда.Звучит запутано разберемся чуть ниже в примерах.
</p>
<h3>Подробней</h3>
<p>У бинарных операндов два оператора, у унарных один. Также
    префиксная и постфиксная форма у инкреметов и декрементов
    отличается тем, где они стоят. Тоесть перед операндом или
    после.
</p>
</body>
</html>